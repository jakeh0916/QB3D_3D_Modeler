$If MATHBI = UNDEFINED Then
    '$INCLUDE:'math.bi'
$End If

$If OBJECTBI = UNDEFINED Then
    '$INCLUDE:'object.bi'
$End If

$If INTERFACEBI = UNDEFINED Then
    '$Include:'interface.bi'
$End If

$If OBJECTBM = UNDEFINED Then
    ' texture handler

    Function load_texture (fileName$)
        Static emptyTexSource As String * 32

        For i = 1 To TEX_MAX_COUNT - 1
            curTexSource$ = trim$(textureHandler(i).source)

            If curTexSource$ = fileName$ Then
                ' found texture, return the ID of that
                ' texture in the texture handler
                load_texture = i
                Exit Function
            ElseIf curTexSource$ = emptyTexSource Then
                Dim newTex As texture
                newTex.source = fileName$

                filePath$ = get_path$(fileName$, "image")
                newHandle32 = _LoadImage(filePath$, 32)
                newHandle = _CopyImage(newHandle32, 33)
                If newHandle32 < -1 Then _FreeImage newHandle32

                newTex.texHandle = newHandle
                textureHandler(i) = newTex

                load_texture = i
                Exit Function
            End If
        Next
    End Function

    ' TO DO: delete texture functionality
    'Function delete_texture (texPointer As Integer)
    ' check if texture is already clear
    ' if textureHandler(texPointer).
    ' i.e.: cycle through every mesh_tri to see
    ' if they use the texture before deleting
    'End Function

    ' mesh handler

    Sub clear_mh
        For i = 1 To TRI_MAX_COUNT - 1: meshHandler(i) = TRI_DEFAULT: Next ' initialize mesh handler j.i.c
        meshPosition = 1
    End Sub

    Function duplicate_mesh (ptr As vec2_ui)
        For i = ptr.u To ptr.v
            di = i - ptr.u
            meshHandler(meshPosition + di) = meshHandler(i)
        Next

        duplicate_mesh = meshPosition + ptr.v - ptr.u + 1
    End Function

    Function load_mesh (fileName$)
        Dim mtlNames(1 To 128) As String ' saves name of material
        Dim texPointers(0 To 128) As Integer ' saves handle to texture of a material
        hasMtlFile = TRUE

        ' obj and mtl files are located in the stuff/objects
        ' folder & they must have the same name
        objFilePath$ = get_path$(fileName$, "object")
        mtlFilePath$ = get_path$(fileName$, "material")
        If Not _FileExists(objFilePath$) Then Exit Function
        If Not _FileExists(mtlFilePath$) Then hasMtlFile = FALSE

        If hasMtlFile Then
            mtlNum = 0

            ' read through material file...
            Open mtlFilePath$ For Input As #2
            Do Until EOF(2)
                Input #2, line$

                If get_sub_string$(line$, " ", 0) = "newmtl" Then
                    mtlNum = mtlNum + 1

                    ' create a new material w/ empty handle
                    mtlNames(mtlNum) = get_sub_string$(line$, " ", 1)
                    texPointers(mtlNum) = 0
                ElseIf get_sub_string$(line$, " ", 0) = "map_Kd" Then
                    ' add the texture or save its index if it's already been added
                    texFilePath$ = get_sub_string$(get_sub_string$(line$, " ", 1), ".", 0)
                    texPointers(mtlNum) = load_texture(texFilePath$)
                End If
            Loop
            Close #2
        End If

        ' create storage for vertices, texture vertices, and normals
        Dim vs(1 To TRI_MAX_COUNT - 1) As vec3
        Dim vts(1 To TRI_MAX_COUNT - 1) As vec2
        Dim vns(1 To TRI_MAX_COUNT - 1) As vec3
        vNum = 1: vtNum = 1: vnNum = 1: tNum = meshPosition
        curTexNum = 0 ' changes with usemtl, defaults to the DNE texture

        ' read through object file...
        Open objFilePath$ For Input As #2
        Do Until EOF(2)
            Input #2, line$

            arg1$ = trim$(get_sub_string$(line$, " ", 0))
            arg2$ = trim$(get_sub_string$(line$, " ", 1))
            arg3$ = trim$(get_sub_string$(line$, " ", 2))
            arg4$ = trim$(get_sub_string$(line$, " ", 3))

            Select Case arg1$
                Case "v"
                    vs(vNum).x = Val(arg2$)
                    vs(vNum).y = Val(arg3$)
                    vs(vNum).z = Val(arg4$)
                    vNum = vNum + 1

                Case "vt"
                    vts(vtNum).u = Val(arg2$)
                    vts(vtNum).v = Val(arg3$)
                    vtNum = vtNum + 1

                Case "vn"
                    vns(vnNum).x = Val(arg2$)
                    vns(vnNum).y = Val(arg3$)
                    vns(vnNum).z = Val(arg4$)
                    vnNum = vnNum + 1

                Case "f"
                    v0Index = Val(get_sub_string$(arg2$, "/", 0))
                    vt0Index = Val(get_sub_string$(arg2$, "/", 1))
                    v1Index = Val(get_sub_string$(arg3$, "/", 0))
                    vt1Index = Val(get_sub_string$(arg3$, "/", 1))
                    v2Index = Val(get_sub_string$(arg4$, "/", 0))
                    vt2Index = Val(get_sub_string$(arg4$, "/", 1))
                    nIndex = Val(get_sub_string$(arg2$, "/", 2))

                    hasUVs = (vt0Index > 0)
                    hasNormal = (nIndex > 0)

                    meshHandler(tNum).v0 = vs(v0Index)
                    meshHandler(tNum).v1 = vs(v1Index)
                    meshHandler(tNum).v2 = vs(v2Index)

                    If hasUVs Then
                        meshHandler(tNum).t0 = vts(vt0Index)
                        meshHandler(tNum).t1 = vts(vt1Index)
                        meshHandler(tNum).t2 = vts(vt2Index)
                    Else
                        meshHandler(tNum).t0.u = 0.0: meshHandler(tNum).t0.v = 1.0
                        meshHandler(tNum).t1.u = 1.0: meshHandler(tNum).t1.v = 0.0
                        meshHandler(tNum).t2.u = 0.0: meshHandler(tNum).t2.v = 0.0
                    End If

                    If hasNormal Then
                        meshHandler(tNum).vn = vns(nIndex)
                    Else meshHandler(tNum).vn = VEC3_DEFAULT
                    End If

                    meshHandler(tNum).texPointer = texPointers(curTexNum)
                    tNum = tNum + 1
                    If tNum > TRI_MAX_COUNT - 1 Then Exit Do

                Case "usemtl"
                    If hasMtlFile Then
                        mtlName$ = arg2$
                        For i = 1 To 128
                            If mtlName$ = mtlNames(i) Then
                                curTexNum = i
                                Exit For
                            End If
                        Next
                    End If
            End Select
        Loop
        Close #2

        load_mesh = tNum
    End Function

    ' game object handler

    Sub clear_goh
        For i = 1 To OBJ_MAX_COUNT - 1: Call unload_game_object(i): Next ' unload all objects (and therefore mesh & texture)
        Call clear_mh
    End Sub

    Function is_object_local (go As game_object)
        is_object_local = vec3_equals(go.position, VEC3_DEFAULT) And vec3_equals(go.velocity, VEC3_DEFAULT) And vec3_equals(go.scale, VEC3_ONE) And vec3_equals(go.rotation, VEC3_DEFAULT)
    End Function

    Function clone_game_object (position As vec3, parentID As Integer)
        Dim newObj As game_object
        newObj.exists = TRUE
        newObj.visible = TRUE
        newObj.position = position
        newObj.velocity = VEC3_DEFAULT
        newObj.scale = VEC3_ONE
        newObj.rotation = VEC3_DEFAULT

        ' use parent's mesh in mesh handler (NOTE: parent's mesh will
        ' be unloaded if parent object is unloaded. Parents can be
        ' set to "not exist" if you want to keep their meshes in the
        ' handler for use of clones.)
        newObj.meshPointer = gameObjectHandler(parentID).meshPointer
        newObj.scriptID = 0

        For i = 1 To OBJ_MAX_COUNT - 1
            If Not gameObjectHandler(i).exists Then
                gameObjectHandler(i) = newObj
                clone_game_object = i
                Exit For
            End If
        Next
    End Function

    Function duplicate_game_object (position As vec3, parentID As Integer)
        Dim newObj As game_object
        newObj.exists = TRUE
        newObj.visible = TRUE
        newObj.position = position
        newObj.velocity = VEC3_DEFAULT
        newObj.scale = VEC3_ONE
        newObj.rotation = VEC3_DEFAULT

        newObj.meshPointer.u = meshPosition
        meshPosition = duplicate_mesh(gameObjectHandler(parentID).meshPointer)
        newObj.meshPointer.v = meshPosition - 1
        newObj.scriptID = 0

        For i = 1 To OBJ_MAX_COUNT - 1
            If Not gameObjectHandler(i).exists Then
                gameObjectHandler(i) = newObj
                duplicate_game_object = i
                Exit For
            End If
        Next
    End Function

    Function load_game_object (position As vec3, initVelocity As vec3, scale As vec3, rotation As vec3, meshName$, scriptID As Integer)
        Dim newObj As game_object
        newObj.exists = TRUE
        newObj.visible = TRUE
        newObj.position = position
        newObj.velocity = initVelocity
        newObj.scale = scale
        newObj.rotation = rotation

        ' load object's mesh to mesh handler & keep track of its location
        newObj.meshPointer.u = meshPosition
        meshPosition = load_mesh(meshName$)
        newObj.meshPointer.v = meshPosition - 1
        newObj.scriptID = scriptID

        For i = 1 To OBJ_MAX_COUNT - 1
            If Not gameObjectHandler(i).exists Then
                gameObjectHandler(i) = newObj
                Exit For
            End If
        Next

        ' return the new position in the mesh handler
        load_game_object = newObj.meshPointer.v + 1
    End Function

    Sub unload_game_object (objPointer As Integer)
        ' deallocate memory in mesh handler
        If gameObjectHandler(objPointer).meshPointer.u > 0 And gameObjectHandler(objPointer).meshPointer.v > 0 And gameObjectHandler(objPointer).meshPointer.v > gameObjectHandler(objPointer).meshPointer.u Then
            For i = gameObjectHandler(objPointer).meshPointer.u To gameObjectHandler(objPointer).meshPointer.v
                ' free texture images shared by game object's mesh
                meshHandler(i) = TRI_DEFAULT
            Next

            ' push all tris to front of mesh handler
            size = gameObjectHandler(objPointer).meshPointer.v - gameObjectHandler(objPointer).meshPointer.u + 1
            For i = gameObjectHandler(objPointer).meshPointer.v + 1 To TRI_MAX_COUNT - 1
                meshHandler(i - size) = meshHandler(i)
                meshHandler(i) = TRI_DEFAULT
            Next

            ' update all objects' mesh pointers IF their mesh came after the deleted object's
            For i = 1 To OBJ_MAX_COUNT - 1
                If Not gameObjectHandler(i).exists Then _Continue

                If gameObjectHandler(i).meshPointer.u > gameObjectHandler(objPointer).meshPointer.v Then
                    gameObjectHandler(i).meshPointer.u = gameObjectHandler(i).meshPointer.u - size
                    gameObjectHandler(i).meshPointer.v = gameObjectHandler(i).meshPointer.v - size
                End If
            Next
        End If

        gameObjectHandler(objPointer) = GAME_OBJECT_DEFAULT
    End Sub

    $Let OBJECTBM = DEFINED
$End If

$If MATHBM = UNDEFINED Then
    '$include:'math.bm'
$End If

$If INTERFACEBM = UNDEFINED Then
    '$include:'interface.bm'
$End If
