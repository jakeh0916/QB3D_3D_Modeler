$If MATHBI = UNDEFINED Then
    '$INCLUDE:'math.bi'
$End If

$If OBJECTBI = UNDEFINED Then
    '$INCLUDE:'object.bi'
$End If

$If INTERFACEBI = UNDEFINED Then
    '$Include:'interface.bi'
$End If

$If DEBUGBM = UNDEFINED Then
    Sub debug_open
        prevDest = _Dest
        _Dest _Console

        Cls
        Print "ALMA 64 v0.8 - a simple 3D engine"
        Print "   (Created in QB64 v1.5 x64)    "
        Print: Print "By JAKE HUSEMAN": Print: Print

        Print "1. load stage file"
        Print "2. view controls & hotkeys"
        Print "3. exit": Print

        inp$ = debug_prompt$(">>")
        Select Case inp$
            Case "1":
                Cls
                Print "Enter the name of a stage file:": Print
                Print "(Some demo files are:"
                Print "   'minecraft'"
                Print "   'csgo_map'"
                Print "   'solar_system')": Print
                fileName$ = debug_prompt$(">>")
                Cls
                load_stage_flag = load_stage(fileName$)
                If load_stage_flag = 1 Then
                    Cls
                    Beep
                    Print "Error (do_#01):"
                    Print "======": Print
                    Print "Stage file not found!"
                    _Delay 3
                    Call debug_open
                End If

            Case "2":
                Cls
                Print "PLAYER CONTROLS:": Print
                Print "W, A, S, D   - Move around"
                Print "Mouse        - Look around"
                Print "Space/Shift  - Fly up/down"
                Print "L. Control   - Move faster": Print
                Print "HOTKEYS:": Print
                Print "Escape            - Close program"
                Print "L. Control + P    - Debug player object"
                Print "L. Control + T    - Debug texture handler"
                Print "L. Control + M    - Debug mesh/tri handler"
                Print "L. Control + G    - Debug game object handler"
                Print: Print
                Print "1. back to main menu"
                Print "2. exit": Print

                inp2$ = debug_prompt$(">>")
                If inp2$ = "2" Then
                    System
                Else Call debug_open
                End If
            Case "3": System
            Case Else: Call debug_open
        End Select

        ' return to previous dest
        _Dest prevDest
    End Sub

    Sub poll_debug_hotkeys
        If get_key_down("lctrl") Then
            ' ctrl + f = fullscreen toggle
            If get_key_press("f") Then
                If _FullScreen Then
                    _FullScreen _Off
                Else _FullScreen _SquarePixels
                End If
            End If

            ' ctrl + p = debug player
            If get_key_press("p") Then
                Call debug_controller(player)
            End If

            ' ctrl + t = debug texture handler
            If get_key_press("t") Then
                Call debug_texture_handler(FALSE)
            End If

            ' ctrl + m = debug mesh handler
            If get_key_press("m") Then
                Call debug_mesh_handler(FALSE)
            End If

            ' ctrl + g = debug game object handler
            If get_key_press("g") Then
                Call debug_game_object_handler(FALSE)
            End If
        End If

        ' esc = exit
        If get_key_press("esc") Then System
    End Sub

    Sub make_complaint (message$)
        message$ = trim$(message$)
        prevDest = _Dest
        _Dest _Console

        ' make complaint
        Static complaintNum
        Print "Complaint"; complaintNum; "-";
        complaintNum = complaintNum + 1
        Print message$

        ' return to previous dest
        _Dest prevDest
    End Sub

    Function debug_prompt$ (message$)
        message$ = trim$(message$)
        prevDest = _Dest
        _Dest _Console
        Print message$
        Input db$
        debug_prompt$ = db$
        _Dest prevDest
    End Function

    Sub debug_vec2 (v As vec2, isSub As Integer)
        prevDest = _Dest
        _Dest _Console
        If Not isSub Then: Print "[vec2]": Else Print "(sub->vec2)"
        Print Using "U: ####.####"; v.u
        Print Using "V: ####.####"; v.v
        _Dest prevDest
    End Sub

    Sub debug_vec2_int (v As vec2_ui, isSub As Integer)
        prevDest = _Dest
        _Dest _Console
        If Not isSub Then: Print "[vec2 unsigned integer]": Else Print "(sub->vec2 int)"
        Print Using "U: ########"; v.u
        Print Using "V: ########"; v.v
        _Dest prevDest
    End Sub

    Sub debug_vec3 (v As vec3, isSub As Integer)
        prevDest = _Dest
        _Dest _Console
        If Not isSub Then: Print "[vec3]": Else Print "(sub->vec3)"
        Print Using "X: ####.####"; v.x
        Print Using "Y: ####.####"; v.y
        Print Using "Z: ####.####"; v.z
        _Dest prevDest
    End Sub

    Sub debug_mat4 (m As mat4, isSub As Integer)
        prevDest = _Dest
        _Dest _Console
        If Not isSub Then: Print "[mat4]": Else Print "(sub->mat4)"
        Print Using "####.#### ####.#### ####.#### ####.####"; m.m00; m.m01; m.m02; m.m03
        Print Using "####.#### ####.#### ####.#### ####.####"; m.m10; m.m11; m.m12; m.m13
        Print Using "####.#### ####.#### ####.#### ####.####"; m.m20; m.m21; m.m22; m.m23
        Print Using "####.#### ####.#### ####.#### ####.####"; m.m30; m.m31; m.m32; m.m33
        _Dest prevDest
    End Sub

    Sub debug_tri (t As tri, isSub As Integer)
        prevDest = _Dest
        _Dest _Console
        If Not isSub Then: Print "[triangle]": Else Print "(sub->triangle)"
        Call debug_vec3(t.v0, TRUE)
        Call debug_vec3(t.v1, TRUE)
        Call debug_vec3(t.v2, TRUE)
        _Dest prevDest
    End Sub

    Sub debug_texture (tex As texture, isSub As Integer)
        prevDest = _Dest
        _Dest _Console
        If Not isSub Then: Print "[texture]": Else Print "(sub->texture)"
        Print "(sub->string)", tex.source
        Print "(sub->long)", tex.texHandle
        _Dest prevDest
    End Sub

    Sub debug_game_object (obj As game_object, isSub As Integer)
        prevDest = _Dest
        _Dest _Console
        If Not isSub Then: Print "[game object]": Else Print "(sub->game object)"
        Print "(sub->int)", obj.exists
        Print "(sub->int)", obj.visible
        Call debug_vec3(obj.position, TRUE)
        Call debug_vec3(obj.velocity, TRUE)
        Call debug_vec3(obj.scale, TRUE)
        Call debug_vec3(obj.rotation, TRUE)
        Call debug_vec2_int(obj.meshPointer, TRUE)
        Print "(sub->int)", obj.scriptID
        Print "(sub->single)", obj.scriptID
        _Dest prevDest
    End Sub

    Sub debug_controller (c As controller)
        prevDest = _Dest
        _Dest _Console
        If Not isSub Then: Print "[game object]": Else Print "(sub->game object)"
        Call debug_vec3(c.position, TRUE)
        Call debug_vec3(c.velocity, TRUE)
        Call debug_vec3(c.cameraOffset, TRUE)
        Call debug_vec3(c.look, TRUE)
        Call debug_vec3(c.lookUp, TRUE)
        Call debug_mat4(c.viewMat, TRUE)
        _Dest prevDest
    End Sub

    Sub debug_texture_handler (detailed As Integer)
        prevDest = _Dest
        _Dest _Console
        Print "[texture handler]"
        For i = 1 To TEX_MAX_COUNT - 1
            Print "{SYS->index}", i

            If detailed Then
                Call debug_texture(textureHandler(i), TRUE)
            Else Print "(string)", textureHandler(i).source
            End If
        Next
        _Dest prevDest
    End Sub

    Sub debug_mesh_handler (detailed As Integer)
        prevDest = _Dest
        _Dest _Console
        Print "[mesh handler]"
        For i = 1 To TRI_MAX_COUNT - 1
            Print "{SYS->index}", i

            If detailed Then
                Call debug_tri(meshHandler(i), TRUE)
            Else Print "(int)", tri_equals(meshHandler(i), TRI_DEFAULT)
            End If
        Next
        _Dest prevDest
    End Sub

    Sub debug_game_object_handler (detailed As Integer)
        prevDest = _Dest
        _Dest _Console
        Print "[object handler]"
        For i = 1 To OBJ_MAX_COUNT - 1
            Print "{SYS->index}", i

            If detailed Then
                Call debug_game_object(gameObjectHandler(i), TRUE)
            Else Print "(int)", gameObjectHandler(i).exists
            End If
        Next
        _Dest prevDest
    End Sub
    $Let DEBUGBM = DEFINED
$End If

$If MATHBM = UNDEFINED Then
    '$include:'math.bm'
$End If

$If ENGINEBM = UNDEFINED Then
    '$include:'engine.bm'
$End If

$If INTERFACEBM = UNDEFINED Then
    '$Include:'interface.bm'
$End If
